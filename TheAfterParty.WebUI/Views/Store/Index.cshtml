@using TheAfterParty.WebUI.Models.Store
@using TheAfterParty.Domain.Entities
@model StoreIndexViewModel

@{
    ViewBag.Title = "Shop";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm(Model.FormName, "Store", new { id = Model.FormID }, FormMethod.Post, new { id = ViewBag.StoreFormID }))
{
@Html.HiddenFor(x => x.PreviousBeginsWithFilter)
@Html.HiddenFor(x => x.PreviousSelectedPlatformID)
@Html.HiddenFor(x => x.PreviousSearchText)
@Html.HiddenFor(x => x.PreviousGameSort)
@Html.HiddenFor(x => x.PreviousPriceSort)
@Html.HiddenFor(x => x.PreviousQuantitySort)
@Html.HiddenFor(x => x.PreviousFilterLibrary)
@Html.HiddenFor(x => x.PreviousFilterBlacklist)
@Html.HiddenFor(x => x.PreviousAffordableFilter)
@Html.HiddenFor(x => x.PreviousFilterWishlist)
<div>
    <div class="row">
        <div class="col-lg-10 col-md-10 col-xl-10">
            <div class="row custom-row-header"><h3>Demo Dan's Co-op Shop</h3></div>
            <div class="row custom-just custom-row-sm custom-row-text">
                <div class="btn-group btn-group-justified" role="group">
                    @if (Model.PreviousBeginsWithFilter == '0')
                    {
                        <div class="btn-group" role="group">
                            <button class="btn btn-transparent text-success text-center" type="submit" value="0" name="BeginsWithFilter" title="#">#</button>
                        </div>
                    }
                    else
                    {
                        <div class="btn-group" role="group">
                            <button class="btn btn-transparent text-center" type="submit" value="0" name="BeginsWithFilter" title="#">#</button>
                        </div>
                    }
                    @for (int i = 97; i < 123; i++)
                    {
                        char letter = (char)i;
                        if (Model.PreviousBeginsWithFilter == letter)
                        {
                            <div class="btn-group" role="group">
                                <button class="btn btn-transparent text-success text-center" type="submit" value="@letter" name="BeginsWithFilter" title="@letter.ToString().ToUpper()">@letter.ToString().ToUpper()</button>
                            </div>
                        }
                        else
                        {
                            <div class="btn-group" role="group">
                                <button class="btn btn-transparent text-center" type="submit" value="@letter" name="BeginsWithFilter" title="@letter.ToString().ToUpper()">@letter.ToString().ToUpper()</button>
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="row custom-row">
                <div class="col-lg-1 col-md-1 col-xl-1 text-left sort-direction">
                    @if (Model.PreviousGameSort == 1 || Model.PreviousQuantitySort == 1 || Model.PreviousPriceSort == 1)
                    {
                        <span class="text-highlighted-primary fa fa-lg fa-arrow-down"></span>
                    }
                    else
                    {
                        <span class="text-highlighted-primary fa fa-lg fa-arrow-up"></span>
                    }                        
                </div>
                <div class="col-lg-7 col-md-7 col-xl-7 text-center">
                    @if (Model.PreviousGameSort == 1)
                    {
                        <button name="GameSort" value="2" type="submit" class="btn-sort text-highlighted-primary col-header-c">Game</button>
                    }
                    else if (Model.PreviousGameSort == 2)
                    {
                        <button name="GameSort" value="1" type="submit" class="btn-sort text-highlighted-primary col-header-c">Game</button>
                    }   
                    else
                    {
                        <button name="GameSort" value="1" type="submit" class="btn-sort col-header-c">Game</button>
                    }
                </div>
                <div class="col-lg-1 col-md-1 col-xl-1 text-center"><span class="col-header-c">Platform</span></div>
                <div class="col-lg-1 col-md-1 col-xl-1 text-center">
                    @if (Model.PreviousQuantitySort == 1)
                    {
                        <button name="QuantitySort" value="2" type="submit" class="btn-sort text-highlighted-primary col-header-c">Quantity</button>
                    }
                    else if (Model.PreviousQuantitySort == 2)
                    {
                        <button name="QuantitySort" value="1" type="submit" class="btn-sort text-highlighted-primary col-header-c">Quantity</button>
                    }
                    else
                    {
                        <button name="QuantitySort" value="1" type="submit" class="btn-sort col-header-c">Quantity</button>
                    }
                </div>
                <div class="col-lg-1 col-md-1 col-xl-1 text-center">
                    @if (Model.PreviousPriceSort == 1)
                    {
                        <button name="PriceSort" value="2" type="submit" class="btn-sort text-highlighted-primary col-header-c">Price</button>
                    }
                    else if (Model.PreviousPriceSort == 2)
                    {
                        <button name="PriceSort" value="1" type="submit" class="btn-sort text-highlighted-primary col-header-c">Price</button>
                    }
                    else
                    {
                        <button name="PriceSort" value="1" type="submit" class="btn-sort col-header-c">Price</button>
                    }
                </div>
                <div class="col-lg-1 col-md-1 col-xl-1"></div>
            </div>
            @if (Model.TotalItems == 0)
            {
                Html.RenderPartial("_EmptyResults", "");
            }
            else
            {
                var i = 0;
                foreach (Listing storeListing in Model.StoreListings)
                {
                   var rowId = "listingRow" + ++i;
                    <div class="row store-entry-sm" id="@rowId">
                        <div class="col-lg-8 col-md-8 col-xl-8 vertical-align">
                            @if (storeListing.Product.AppID != 0 && storeListing.Product.IsSteamAppID == true)
                            {
                                var url = String.Empty;

                                if (storeListing.IsComplex())
                                {
                                    url = "http://store.steampowered.com/sub/";
                                }
                                else
                                {
                                    url = "http://store.steampowered.com/app/";
                                }

                                 url += storeListing.Product.AppID.ToString();

                                if (storeListing.IsComplex())
                                {
                                    var listing = "listing" + i + "id";
                                    <div id="@listing" onclick="ToggleHiddenAlt(this)">
                                        <span class="fa fa-fw fa-lg fa-chevron-right pad-left expand-button icon-blue"></span>
                                    </div>
                                }

                                if (User.Identity.IsAuthenticated)
                                {
                                    if (Model.LoggedInUser.IsBlacklisted(storeListing))
                                    {
                                        <div class="store-entry-blacklist text-inactive" id="blacklistButton" onclick="AddToBlacklist(this, @storeListing.ListingID, @i);">
                                            <i class="fa fa-ban fa-lg store-blacklist store-blacklist-active"></i>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="store-entry-blacklist" id="blacklistButton" onclick="AddToBlacklist(this, @storeListing.ListingID, @i);">
                                            <i class="fa fa-ban fa-lg store-blacklist"></i>
                                        </div>
                                    }
                                }
                                    <div class="outer-banner-container">
                                        <a href="@url">
                                            @if (String.IsNullOrEmpty(storeListing.Product?.GetHttpsSecuredHeaderImage()))
                                            {
                                                <div class="inner-store-banner-container delayed-load" data-src="/Content/applogo.gif" style="background-image: url('a.gif')"></div>
                                            }
                                            else
                                            {
                                                <div class="inner-store-banner-container delayed-load" data-src="@storeListing.Product.GetHttpsSecuredHeaderImage()" style="background-image: url('a.gif')"></div>
                                            }
                                        </a>
                                    </div>
                                    <div class="store-entry-name">
                                        <a href="@url">
                                            <span>@storeListing.ListingName</span>
                                        </a>
                                    </div>
                            }
                            else
                            {
                                if (User.Identity.IsAuthenticated)
                                {
                                    if (Model.LoggedInUser.IsBlacklisted(storeListing))
                                    {
                                        <div class="store-entry-blacklist text-inactive" id="blacklistButton" onclick="AddToBlacklist(this, @storeListing.ListingID, @i);">
                                            <i class="fa fa-ban fa-lg store-blacklist store-blacklist-active"></i>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="store-entry-blacklist" id="blacklistButton" onclick="AddToBlacklist(this, @storeListing.ListingID, @i);">
                                            <i class="fa fa-ban fa-lg store-blacklist"></i>
                                        </div>
                                    }
                                }
                                <div class="outer-banner-container">
                                    @if (String.IsNullOrEmpty(storeListing.Product?.GetHttpsSecuredHeaderImage()))
                                    {
                                        <div class="inner-store-banner-container delayed-load" data-src="/Content/applogo.gif" style="background-image: url('a.gif')"></div>
                                    }
                                    else
                                    {
                                        <div class="inner-store-banner-container delayed-load" data-src="@storeListing.Product.GetHttpsSecuredHeaderImage()" style="background-image: url('a.gif')"></div>
                                    }
                                </div>
                                <div class="store-entry-name">
                                    <span class="text-lblue">@storeListing.ListingName</span>
                                </div>
                            }
                        </div>  
                        <div class="col-lg-1 col-md-1 col-xl-1 vertical-align">
                            @foreach (string platformIconUrl in storeListing.Platforms.OrderBy(p => p.PlatformName).Select(p => p.PlatformIconURL))
                            {
                                <div class="icon-image-container">
                                    <div class="icon-image text-center delayed-load" data-src="@platformIconUrl" style="background-image: url('a.gif')"></div>
                                </div>
                            }
                        </div>
                        <div class="col-lg-1 col-md-1 col-xl-1 col-text text-center">
                            @storeListing.Quantity
                        </div>
                        <div class="col-lg-1 col-md-1 col-xl-1 col-text text-center text-nowrap">
                            @if (storeListing.HasSale())
                            {
                                <del>@storeListing.ListingPrice</del>   <span class="text-success tag-inline">@storeListing.SaleOrDefaultPrice()</span>
                            }
                            else
                            {
                                @storeListing.ListingPrice
                            }
                        </div>
                        @if (User.Identity.IsAuthenticated)
                        {
                        <div class="col-lg-1 col-md-1 col-xl-1 store-entry-cart" id="cartButton" onclick="AddToCart(@(storeListing.ListingID), this);">
                            <i class="fa fa-shopping-cart fa-lg store-cart"></i>
                        </div>
                        }
                    </div>
                    if (storeListing.ChildListings.Count > 0)
                    {
                        var listing = "listing" + i + "id1";
                        <div class="is-hidden" id="@listing">
                            @foreach (Listing childListing in storeListing.ChildListings)
                            {
                                <div class="row store-sub-entry-sm">
                                    <div class="col-lg-1 col-md-1 col-xl-1"></div>
                                    <div class="col-lg-7 col-md-7 col-xl-7 vertical-align">
                                        @if (childListing.Product.AppID != 0 && childListing.ContainsPlatform("Steam"))
                                        {
                                            var url = "http://store.steampowered.com/app/" + childListing.Product.AppID;
                                            <div class="outer-banner-container">
                                                <a href="@url">
                                                    @if (String.IsNullOrEmpty(childListing.Product?.GetHttpsSecuredHeaderImage()))
                                                    {
                                                        <div class="inner-store-banner-container delayed-load" data-src="/Content/applogo.gif" style="background-image: url('a.gif')"></div>
                                                    }
                                                    else
                                                    {
                                                        <div class="inner-store-banner-container delayed-load" data-src="@childListing.Product.GetHttpsSecuredHeaderImage()" style="background-image: url('a.gif')"></div>
                                                    }
                                                </a>
                                            </div>
                                            <div class="store-entry-name">
                                                <a href="@url">
                                                    <span>@childListing.ListingName</span>
                                                </a>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="outer-banner-container">
                                               @if (String.IsNullOrEmpty(childListing.Product?.GetHttpsSecuredHeaderImage()))
                                                {
                                                <div class="inner-store-banner-container delayed-load" data-src="/Content/applogo.gif" style="background-image: url('a.gif')"></div>
                                                }
                                                else
                                                {
                                                <div class="inner-store-banner-container delayed-load" data-src="@storeListing.Product.GetHttpsSecuredHeaderImage()" style="background-image: url('a.gif')"></div>
                                                }
                                            </div>
                                            <div class="store-entry-name">
                                                <span class="text-lblue">@childListing.ListingName</span>
                                            </div>
                                        }
                                    </div>
                                    <div class="col-lg-1 col-md-1 col-xl-1 vertical-align">
                                        @foreach (string platformIconUrl in childListing.Platforms.OrderBy(p => p.PlatformName).Select(p => p.PlatformIconURL))
                                        {
                                            <div class="icon-image-container">
                                                <div class="icon-image text-center delayed-load" data-src="@platformIconUrl" style="background-image: url('a.gif')"></div>
                                            </div>
                                        }
                                    </div>
                                    <div class="col-lg-1 col-md-1 col-xl-1 col-text text-center">
                                        @childListing.Quantity
                                    </div>
                                    <div class="col-lg-1 col-md-1 col-xl-1 col-text text-center">
                                        @childListing.ListingPrice
                                    </div>
                                    <div class="col-lg-1 col-md-1 col-xl-1"></div>
                                </div>
                            }
                        </div>
                    }
                }
                <div class="row">
                    <div class="col-lg-12 col-md-12 col-xl-12 pagination-holder vertical-align">
                        @Html.PageLinks(Model)
                    </div>
                </div>
            }
        </div>
        <div class="col-lg-2 col-md-2 col-xl-2">
            <div class="top-padding"></div>
            <a href="@Url.Action("Index", "Store")" class="btn btn-sm btn-success btn-custom">Clear Search</a>
            <h3 class="text-primary nav-grouping-header filters">Game Search</h3>
            <div class="input-group-xs input-group">
                <input type="text" class="form-control gray-input" name="SearchText" value="@Model.SearchText" />
                <span class="input-group-btn">
                    <button class="btn btn-default btn-xs green-bg" title="Search" type="submit" name="SearchTextBool" value="true"><i class="fa fa-search search-icon"></i></button>
                </span>
            </div>
            <h3 class="text-primary nav-grouping-header text-nowrap filters" style="width: 100%;">Filter by SteamID</h3>
            <div class="input-group-xs input-group">
                <input type="text" class="form-control gray-input" name="FriendSteamID" value="@Model.FriendSteamID" />
                <span class="input-group-btn">
                    <button class="btn btn-default btn-xs green-bg" title="Search" type="submit" name="FriendSteamIDBool" value="true"><i class="fa fa-search search-icon"></i></button>
                </span>
            </div>
            @if (Context.User.Identity.IsAuthenticated)
            {
                <h3 class="text-primary nav-grouping-header clickable no-select filters" onclick="ToggleFilters('user')">User Filters <span id="userchev" class="fa fa-chevron-up pull-right"></span></h3>
                <div id="userContainer">
                    <div class="filter-div">
                        @if (Model.PreviousFilterLibrary)
                        {
                            <button type="submit" class="btn-transparent text-nowrap" name="FilterLibrary" value="true">
                                <i class="fa fa-square adjusted-fa text-success"></i> @Html.Label("Unowned", new { @class = "text-success store-filter" })
                            </button>
                        }
                        else
                        {
                            <button type="submit" class="btn-transparent text-nowrap" name="FilterLibrary" value="true">
                                <i class="fa fa-square-o adjusted-fa text-success"></i> @Html.Label("Unowned", new { @class = "text-success store-filter" })
                            </button>
                        }
                    </div>
                    <div class="filter-div">
                        @if (Model.PreviousFilterWishlist)
                    {
                            <button type="submit" class="btn-transparent text-nowrap" name="FilterWishlist" value="true">
                                <i class="fa fa-square adjusted-fa text-success"></i> @Html.Label("Wishlisted", new { @class = "text-success store-filter" })
                            </button>
                        }
                        else
                        {
                            <button type="submit" class="btn-transparent text-nowrap" name="FilterWishlist" value="true">
                                <i class="fa fa-square-o adjusted-fa text-success"></i> @Html.Label("Wishlisted", new { @class = "text-success store-filter" })
                            </button>
                        }
                    </div>
                    <div class="filter-div">
                    @if (Model.PreviousFilterBlacklist)
                    {
                        <button type="submit" class="btn-transparent text-nowrap" name="FilterBlacklist" value="true">
                            <i class="fa fa-square adjusted-fa text-success"></i> @Html.Label("Blacklist", new { @class = "text-success store-filter" })
                        </button>
                    }
                    else
                    {
                        <button type="submit" class="btn-transparent text-nowrap" name="FilterBlacklist" value="true">
                            <i class="fa fa-square-o adjusted-fa text-success"></i> @Html.Label("Blacklist", new { @class = "text-success store-filter" })
                        </button>
                    }
                    </div>
                    <div class="filter-div">
                        @if (Model.PreviousAffordableFilter)
                        {
                            <button type="submit" class="btn-transparent text-nowrap" name="AffordableFilter" value="true">
                                <i class="fa fa-square adjusted-fa text-success"></i> @Html.Label("Affordable", new { @class = "text-success store-filter" })
                            </button>
                        }
                        else
                        {
                            <button type="submit" class="btn-transparent text-nowrap" name="AffordableFilter" value="true">
                                <i class="fa fa-square-o adjusted-fa text-success"></i> @Html.Label("Affordable", new { @class = "text-success store-filter" })
                            </button>
                        }
                    </div>
                </div>
            }
            <h3 class="text-primary nav-grouping-header clickable no-select filters" onclick="ToggleFilters('categories')">Categories <span id="categorieschev" class="fa fa-chevron-up pull-right"></span></h3>
                @if (Model.SelectedProductCategoryMappings != null)
                {
                    <div id="categoriesContainer">
                        @for (int i = 0; i < Model.SelectedProductCategoryMappings.Count(); i++)
                        {
                            string idString = "SelectedProductCategoryMappings_" + i + "__IsSelected";
                            SelectedProductCategoryMapping currentCategoryMapping = Model.SelectedProductCategoryMappings.ElementAt(i);
                            @Html.HiddenFor(x => currentCategoryMapping.ProductCategory.ProductCategoryID)
                            @Html.HiddenFor(x => currentCategoryMapping.ProductCategory.CategoryString)
                            @Html.HiddenFor(x => currentCategoryMapping.IsSelected)
                            <div class="filter-div">                                
                                @if (currentCategoryMapping.IsSelected)
                                {
                                <button type="submit" class="btn-transparent text-nowrap" name="CategoryToChange" value="@currentCategoryMapping.ProductCategory.ProductCategoryID">
                                    <i class="fa fa-square adjusted-fa text-success"></i> @Html.Label(currentCategoryMapping.ProductCategory.CategoryString, new { @class = "store-filter text-success" })
                                </button>
                                }
                                else
                                {
                                <button type="submit" class="btn-transparent text-nowrap" name="CategoryToChange" value="@currentCategoryMapping.ProductCategory.ProductCategoryID">
                                    <i class="fa fa-square-o adjusted-fa text-success"></i> @Html.Label(currentCategoryMapping.ProductCategory.CategoryString, new { @class = "store-filter text-success" })
                                </button>
                                }
                            </div>
                                }
                    </div>
                }
            <h3 class="text-primary nav-grouping-header filters clickable no-select" onclick="ToggleFilters('genres')">Genres <span id="genreschev" class="fa fa-chevron-up pull-right"></span></h3>
                @if (Model.SelectedTagMappings != null)
                {
                    <div id="genresContainer">
                        @for (int i = 0; i < Model.SelectedTagMappings.Count(); i++)
                        {
                            string idString = "SelectedTagMappings_" + i + "__IsSelected";
                            SelectedTagMapping currentTagMapping = Model.SelectedTagMappings.ElementAt(i);
                            @Html.HiddenFor(x => currentTagMapping.StoreTag.TagID)
                            @Html.HiddenFor(x => currentTagMapping.StoreTag.TagName)
                            @Html.HiddenFor(x => currentTagMapping.IsSelected)
                            <div class="filter-div">
                                @if (currentTagMapping.IsSelected)
                                {
                                    <button class="btn-transparent text-nowrap" type="submit" name="TagToChange" value="@currentTagMapping.StoreTag.TagID">
                                        <i class="fa fa-square adjusted-fa text-success"></i> @Html.Label(currentTagMapping.StoreTag.TagName, new { @class = "store-filter text-success" })
                                    </button>
                                }
                                else
                                {
                                    <button class="btn-transparent text-nowrap" type="submit" name="TagToChange" value="@currentTagMapping.StoreTag.TagID">
                                        <i class="fa fa-square-o adjusted-fa text-success"></i> @Html.Label(currentTagMapping.StoreTag.TagName, new { @class = "store-filter text-success" })
                                    </button>
                                }
                            </div>
                        }
                    </div>
                }
        </div>
    </div>
</div>
}