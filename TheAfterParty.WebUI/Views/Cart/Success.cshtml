@using TheAfterParty.WebUI.Models.Cart
@using TheAfterParty.Domain.Entities
@model PurchaseViewModel

@{
    ViewBag.Title = "Order";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div>
    <div class="row custom-row-header">
        <h3>Success!</h3>
    </div>
    <div class="row custom-row col-header text-center">
        <div class="col-lg-6 col-md-6 col-xl-6">Game</div>
        <div class="col-lg-1 col-md-1 col-xl-1">Platform</div>
        <div class="col-lg-4 col-md-4 col-xl-4">Product Key</div>
        <div class="col-lg-1 col-md-1 col-xl-1">Price</div>
    </div>
    @{int k = 0; }
    @foreach (ProductOrderEntry entry in Model.Order.ProductOrderEntries)
    {
        if (entry.Listing.ChildListings == null || entry.Listing.ChildListings.Count == 0 || entry.ClaimedProductKeys.Count == 1)
        {
            <div class="row store-entry-sm text-center">
                <div class="col-lg-6 col-md-6 col-xl-6 text-left vertical-align">
                    <div class="outer-banner-container">
                        @{ String imageUrl = entry.Listing?.Product?.GetHttpsSecuredHeaderImage();}
                        @if (String.IsNullOrEmpty(imageUrl))
                        {
                            <div class="inner-store-banner-container" style="background-image: url('/Content/applogo.gif')"></div>
                        }
                        else
                        {
                            <div class="inner-store-banner-container" style="background-image: url(@imageUrl)"></div>
                        }
                    </div>
                    <div class="store-entry-name">
                        @entry.Listing.ListingName
                    </div>
                </div>
                <div class="col-lg-1 col-md-1 col-xl-1">
                    @foreach (string platformIconUrl in entry.Listing.Platforms.OrderBy(p => p.PlatformName).Select(p => p.PlatformIconURL))
                    {
                        <div class="icon-image-container">
                            <div class="icon-image text-center" style="background-image: url('@platformIconUrl')"></div>
                        </div>
                    }
                </div>
                <div class="col-lg-4 col-md-4 col-xl-4">
                    @{
                        string keyBtn = "keyBtn" + k;
                        string toggleBtn = keyBtn + "toggle";
                        ClaimedProductKey currentKey = entry.ClaimedProductKeys.First();
                        if (currentKey.IsGift)
                        {
                            <input type="button" value="🔒" class="toggle-used-inactive-btn" /><input type="button" value="Gift Copy" class="reveal-btn" />
                        }
                        else if (currentKey.IsRevealed && !currentKey.IsUsed)
                        {
                            <input type="button" id="@toggleBtn" value="🔒" class="toggle-used-btn" onclick="ToggleKeyUsed(@currentKey.ClaimedProductKeyID,this,@keyBtn);" /><input id="@keyBtn" type="button" value="@currentKey.Key" class="unused-btn" />
                        }
                        else if (currentKey.IsRevealed && currentKey.IsUsed)
                        {
                            <input type="button" id="@toggleBtn" value="🔓" class="toggle-used-btn" onclick="ToggleKeyUsed(@currentKey.ClaimedProductKeyID,this,@keyBtn);" /><input id="@keyBtn" type="button" value="@currentKey.Key" class="used-btn" />
                        }
                        else
                        {
                            <input type="button" id="@toggleBtn" value="🔒" class="awaiting-reveal toggle-used-inactive-btn" onclick="ToggleKeyUsed(@currentKey.ClaimedProductKeyID,this,@keyBtn);" /><input id="@keyBtn" type="button" value="Reveal" class="reveal-btn" onclick="MarkKeyRevealed(@currentKey.ClaimedProductKeyID,this);" />
                        }
                    }
                </div>
                <div class="col-lg-1 col-md-1 col-xl-1 col-text text-success">@entry.SalePrice</div>
            </div>
        }
        else
        {
            <div class="row store-entry-sm text-center">
                <div class="col-lg-6 col-md-6 col-xl-6 vertical-align text-left">
                    <div class="outer-banner-container">
                        @{ String imageUrl = entry.Listing?.Product?.GetHttpsSecuredHeaderImage();}
                        @if (String.IsNullOrEmpty(imageUrl))
                        {
                            <div class="inner-store-banner-container" style="background-image: url('/Content/applogo.gif')"></div>
                        }
                        else
                        {
                            <div class="inner-store-banner-container" style="background-image: url(@imageUrl)"></div>
                        }
                    </div>
                    <div class="store-entry-name">
                        @entry.Listing.ListingName
                    </div>
                </div>
                <div class="col-lg-1 col-md-1 col-xl-1 vertical-align">
                    @foreach (string platformIconUrl in entry.Listing.Platforms.OrderBy(p => p.PlatformName).Select(p => p.PlatformIconURL))
                    {
                        <div class="icon-image-container">
                            <div class="icon-image text-center" style="background-image: url('@platformIconUrl')"></div>
                        </div>
                    }
                </div>
                <div class="col-lg-4 col-md-4 col-xl-4"></div>
                <div class="col-lg-1 col-md-1 col-xl-1 text-success col-text">@entry.SalePrice</div>
            </div>
            int i = 0;
            foreach (ClaimedProductKey claimedKey in entry.ClaimedProductKeys)
            {
                <div class="row store-sub-entry-sm text-center">
                    <div class="col-lg-1 col-md-1 col-xl-1"></div>
                    <div class="col-lg-5 col-md-5 col-xl-5 vertical-align text-left">
                        <div class="outer-banner-container">
                            @{ String keyImageUrl = claimedKey.Listing?.Product?.GetHttpsSecuredHeaderImage();}
                            @if (String.IsNullOrEmpty(imageUrl))
                            {
                                <div class="inner-store-banner-container" style="background-image: url('/Content/applogo.gif')"></div>
                            }
                            else
                            {
                                <div class="inner-store-banner-container" style="background-image: url(@imageUrl)"></div>
                            }
                        </div>
                        <div class="store-entry-name">
                            @claimedKey.Listing.ListingName
                        </div>
                    </div>
                    <div class="col-lg-1 col-md-1 col-xl-1 vertical-align">
                        @foreach (string platformIconUrl in claimedKey.Listing.Platforms.OrderBy(p => p.PlatformName).Select(p => p.PlatformIconURL))
                        {
                            <div class="icon-image-container">
                                <div class="icon-image text-center" style="background-image: url('@platformIconUrl')"></div>
                            </div>
                        }
                    </div>
                    <div class="col-lg-4 col-md-4 col-xl-4">
                        @{
                            string keyBtn = "keyBtn" + k + "sub" + i;
                            string toggleBtn = keyBtn + "toggle";
                            if (claimedKey.IsGift)
                            {
                                <input type="button" value="🔒" class="toggle-used-inactive-btn" /><input type="button" value="Gift" class="reveal-btn" />
                            }
                            else if (claimedKey.IsRevealed && !claimedKey.IsUsed)
                            {
                                <input type="button" id="@toggleBtn" value="🔒" class="toggle-used-btn" onclick="ToggleKeyUsed(@claimedKey.ClaimedProductKeyID,this,@keyBtn);" /><input id="@keyBtn" type="button" value="@claimedKey.Key" class="unused-btn" />
                            }
                            else if (claimedKey.IsRevealed && claimedKey.IsUsed)
                            {
                                <input type="button" id="@toggleBtn" value="🔓" class="toggle-used-btn" onclick="ToggleKeyUsed(@claimedKey.ClaimedProductKeyID,this,@keyBtn);" /><input id="@keyBtn" type="button" value="@claimedKey.Key" class="used-btn" />
                            }
                            else
                            {
                                <input type="button" id="@toggleBtn" value="🔒" class="awaiting-reveal toggle-used-inactive-btn" onclick="ToggleKeyUsed(@claimedKey.ClaimedProductKeyID,this,@keyBtn);" /><input id="@keyBtn" type="button" value="Reveal" class="reveal-btn" onclick="MarkKeyRevealed(@claimedKey.ClaimedProductKeyID,this);" />
                            }
                        }
                    </div>
                    <div class="col-lg-1 col-md-1 col-xl-1 text-center"></div>
                </div>
                i++;
            }
        }
        k++;
    }
    <br />
    <div class="row col-text">
        <div class="col-lg-8 col-md-8 col-xl-8"></div>
        <div class="col-lg-1 col-md-1 col-xl-1 text-primary">Total:</div>
        <div class="col-lg-2 col-md-2 col-xl-2"></div>
        <div class="col-lg-1 col-md-1 col-xl-1 text-center text-success">@Model.Order.TotalSalePrice()</div>
    </div>
    <br />
    <div class="row col-text">
        <div class="col-lg-8 col-md-8 col-xl-8"></div>
        <div class="col-lg-1 col-md-1 col-xl-1 text-primary">Date:</div>
        <div class="col-lg-3 col-md-3 col-xl-3 text-purple text-right">@Model.GetConvertedDateTime((DateTime)Model.Order.SaleDate).ToString("MMM dd, yyyy")</div>
    </div>
</div>