@using TheAfterParty.WebUI.Models.Account
@using TheAfterParty.Domain.Entities
@model AccountKeysModel


@{
    ViewBag.Title = "Keys";
}

<div class="container">
    <div class="row custom-row-header">
        <h3>My Keys</h3>
    </div>
    <div class="row custom-row">
        <div class="col-lg-7">
            Game Name
        </div>
        <div class="col-lg-1">
            Platform
        </div>
        <div class="col-lg-4 text-center">
            Product Key
        </div>
    </div>
    @for (int i = 0; i < Model.Keys.Count; i++)
    {
        ClaimedProductKey key = Model.Keys[i];
        <div class="row store-entry-sm">
            <div class="col-lg-7">
                <div class="outer-banner-container">
                    @if (String.IsNullOrEmpty(key.Listing.Product.ProductDetail.HeaderImageURL))
                    {
                        <div class="inner-store-banner-container" style="background-image: url('/Content/applogo.gif')"></div>
                    }
                    else
                    {
                        <div class="inner-store-banner-container" style="background-image: url(@key.Listing.Product.ProductDetail.HeaderImageURL)"></div>
                    }
                </div>
                <div class="store-entry-name">
                    @key.Listing.ListingName
                </div>
            </div>
            <div class="col-lg-1 text-center">
            @foreach (string platformIconUrl in key.Listing.Platforms.OrderBy(p => p.PlatformName).Select(p => p.PlatformIconURL))
            {
                <div class="icon-image-container">
                    <div class="icon-image text-center" style="background-image: url('@platformIconUrl')"></div>
                </div>
            }
            </div>
            <div class="col-lg-4 text-center">
                @{
                    string keyBtn = "keyBtn" + i;
                    string toggleBtn = keyBtn + "toggle";
                    if (key.IsGift)
                    {
                        <input type="button" value="🔒" class="toggle-used-inactive-btn"/><input type="button" value="Gift" class="reveal-btn" />
                    }
                    else if (key.IsRevealed && !key.IsUsed)
                    {
                        <input type="button" id="@toggleBtn" value="🔒" class="toggle-used-btn" onclick="ToggleKeyUsed(@key.ClaimedProductKeyID,this,@keyBtn);"/><input id="@keyBtn" type="button" value="@key.Key" class="unused-btn" />
                    }
                    else if (key.IsRevealed && key.IsUsed)
                    {
                        <input type="button" id="@toggleBtn" value="🔓" class="toggle-used-btn" onclick="ToggleKeyUsed(@key.ClaimedProductKeyID,this,@keyBtn);"/><input id="@keyBtn" type="button" value="@key.Key" class="used-btn" />
                    }
                    else
                    {
                        <input type="button" id="@toggleBtn" value="🔒" class="awaiting-reveal toggle-used-inactive-btn" onclick="ToggleKeyUsed(@key.ClaimedProductKeyID,this,@keyBtn);"/><input id="@keyBtn" type="button" value="Reveal" class="reveal-btn" onclick="MarkKeyRevealed(@key.ClaimedProductKeyID,this);" />
                    }
                }
            </div>
        </div>
    }
</div>