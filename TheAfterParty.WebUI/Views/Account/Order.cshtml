@using TheAfterParty.WebUI.Models.Account
@using TheAfterParty.Domain.Entities
@model AccountOrderModel

@{
    ViewBag.Title = "Order";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <div class="row custom-row-header">
        <h3>Order #@Model.Order.OrderID</h3>
    </div>
    <div class="row custom-row">
        <div class="col-lg-6 text-center">Game</div>
        <div class="col-lg-1 text-center">Platform</div>
        <div class="col-lg-4 text-left text-center">Product Key</div>
        <div class="col-lg-1 text-right">Price</div>
    </div>
    @for (int k = 0; k < Model.Order.ProductOrderEntries.Count; k++)
    {
        ProductOrderEntry entry = Model.Order.ProductOrderEntries.ElementAt(k);
        if (entry.Listing.ChildListings == null || entry.Listing.ChildListings.Count == 0 || entry.ClaimedProductKeys.Count == 1)
        {
        <div class="row store-entry-sm">
            <div class="col-lg-6">
                <div class="outer-banner-container">
                    @if (String.IsNullOrEmpty(entry.Listing.Product.ProductDetail.HeaderImageURL))
                    {
                        <div class="inner-store-banner-container" style="background-image: url('/Content/applogo.gif')"></div>
                    }
                    else
                    {
                        <div class="inner-store-banner-container" style="background-image: url(@entry.Listing.Product.ProductDetail.HeaderImageURL)"></div>
                    }
                </div>
                <div class="store-entry-name">
                    @entry.Listing.ListingName
                </div>
            </div>
            <div class="col-lg-1 text-center">
                @foreach (string platformIconUrl in entry.Listing.Platforms.OrderBy(p => p.PlatformName).Select(p => p.PlatformIconURL))
                    {
                    <div class="icon-image-container">
                        <div class="icon-image text-center" style="background-image: url('@platformIconUrl')"></div>
                    </div>
                    }
            </div>
            <div class="col-lg-4 text-left">
                @{
                    string keyBtn = "keyBtn" + k;
                    string toggleBtn = keyBtn + "toggle";
                    if (entry.ClaimedProductKeys.First().IsGift)
                    {
                        <input type="button" value="🔒" class="toggle-used-inactive-btn" /><input type="button" value="Gift" class="reveal-btn" />
                    }
                    else if (entry.ClaimedProductKeys.First().IsRevealed && !entry.ClaimedProductKeys.First().IsUsed)
                    {
                        <input type="button" id="@toggleBtn" value="🔒" class="toggle-used-btn" onclick="ToggleKeyUsed(@entry.ClaimedProductKeys.First().ClaimedProductKeyID,this,@keyBtn);" /><input id="@keyBtn" type="button" value="@entry.ClaimedProductKeys.First().Key" class="unused-btn" />
                    }
                    else if (entry.ClaimedProductKeys.First().IsRevealed && entry.ClaimedProductKeys.First().IsUsed)
                    {
                        <input type="button" id="@toggleBtn" value="🔓" class="toggle-used-btn" onclick="ToggleKeyUsed(@entry.ClaimedProductKeys.First().ClaimedProductKeyID,this,@keyBtn);" /><input id="@keyBtn" type="button" value="@entry.ClaimedProductKeys.First().Key" class="used-btn" />
                    }
                    else
                    {
                        <input type="button" id="@toggleBtn" value="🔒" class="awaiting-reveal toggle-used-inactive-btn" onclick="ToggleKeyUsed(@entry.ClaimedProductKeys.First().ClaimedProductKeyID,this,@keyBtn);" /><input id="@keyBtn" type="button" value="Reveal" class="reveal-btn" onclick="MarkKeyRevealed(@entry.ClaimedProductKeys.First().ClaimedProductKeyID,this);" />
                    }
                }
            </div>
            <div class="col-lg-1 text-center">@entry.SalePrice</div>
        </div>
        }
        else
        {
            <div class="row store-entry-sm">
                <div class="col-lg-6">
                    <div class="outer-banner-container">
                        @if (String.IsNullOrEmpty(entry.Listing.Product.ProductDetail.HeaderImageURL))
                    {
                            <div class="inner-store-banner-container" style="background-image: url('/Content/applogo.gif')"></div>
                        }
                        else
                        {
                            <div class="inner-store-banner-container" style="background-image: url(@entry.Listing.Product.ProductDetail.HeaderImageURL)"></div>
                        }
                    </div>
                    <div class="store-entry-name">
                        @entry.Listing.ListingName
                    </div>
                </div>
                <div class="col-lg-1 text-center">
                    @foreach (string platformIconUrl in entry.Listing.Platforms.OrderBy(p => p.PlatformName).Select(p => p.PlatformIconURL))
                    {
                        <div class="icon-image-container">
                            <div class="icon-image text-center" style="background-image: url('@platformIconUrl')"></div>
                        </div>
                    }
                </div>
                <div class="col-lg-4 text-left"></div>
                <div class="col-lg-1 text-center">@entry.SalePrice</div>
            </div>
            for (int i = 0; i < entry.ClaimedProductKeys.Count; i++)
            {
                ClaimedProductKey claimedKey = entry.ClaimedProductKeys.ElementAt(i);
                <div class="row store-entry-sm">
                    <div class="col-lg-1"></div>
                    <div class="col-lg-5">
                        <div class="outer-banner-container">
                            @if (String.IsNullOrEmpty(claimedKey.Listing.Product.ProductDetail.HeaderImageURL))
                            {
                                <div class="inner-store-banner-container" style="background-image: url('/Content/applogo.gif')"></div>
                            }
                            else
                            {
                                <div class="inner-store-banner-container" style="background-image: url(@claimedKey.Listing.Product.ProductDetail.HeaderImageURL)"></div>
                            }
                        </div>
                        <div class="store-entry-name">
                            @claimedKey.Listing.ListingName
                        </div>
                    </div>
                    <div class="col-lg-1 text-center">
                        @foreach (string platformIconUrl in claimedKey.Listing.Platforms.OrderBy(p => p.PlatformName).Select(p => p.PlatformIconURL))
                        {
                            <div class="icon-image-container">
                                <div class="icon-image text-center" style="background-image: url('@platformIconUrl')"></div>
                            </div>
                        }
                    </div>
                    <div class="col-lg-4 text-center">
                        @{
                            string keyBtn = "keyBtn" + k + "sub" + i;
                            string toggleBtn = keyBtn + "toggle";
                            if (claimedKey.IsGift)
                            {
                                <input type="button" value="🔒" class="toggle-used-inactive-btn" /><input type="button" value="Gift" class="reveal-btn" />
                            }
                            else if (claimedKey.IsRevealed && !claimedKey.IsUsed)
                            {
                                <input type="button" id="@toggleBtn" value="🔒" class="toggle-used-btn" onclick="ToggleKeyUsed(@claimedKey.ClaimedProductKeyID,this,@keyBtn);" /><input id="@keyBtn" type="button" value="@claimedKey.Key" class="unused-btn" />
                            }
                            else if (claimedKey.IsRevealed && claimedKey.IsUsed)
                            {
                                <input type="button" id="@toggleBtn" value="🔓" class="toggle-used-btn" onclick="ToggleKeyUsed(@claimedKey.ClaimedProductKeyID,this,@keyBtn);" /><input id="@keyBtn" type="button" value="@claimedKey.Key" class="used-btn" />
                            }
                            else
                            {
                                <input type="button" id="@toggleBtn" value="🔒" class="awaiting-reveal toggle-used-inactive-btn" onclick="ToggleKeyUsed(@claimedKey.ClaimedProductKeyID,this,@keyBtn);" /><input id="@keyBtn" type="button" value="Reveal" class="reveal-btn" onclick="MarkKeyRevealed(@claimedKey.ClaimedProductKeyID,this);" />
                            }
                        }
                    </div>
                    <div class="col-lg-1 text-center"></div>
                </div>
            }
        }
    }
    <br/>
    <div class="row">
        <div class="col-lg-8"></div>
        <div class="col-lg-1 text-primary">Total:</div>
        <div class="col-lg-2"></div>
        <div class="col-lg-1 text-center">@Model.Order.TotalSalePrice()</div>
    </div>
    <br />
    <div class="row">
        <div class="col-lg-8"></div>
        <div class="col-lg-1 text-primary">Date:</div>
        <div class="col-lg-3 text-right">@Model.Order.SaleDate</div>
    </div>
</div>