@using TheAfterParty.Domain.Entities
@using TheAfterParty.WebUI.Models.Objectives
@model ObjectivesIndexViewModel

@{
    ViewBag.Title = "Index";
}

@using (Html.BeginForm("Index", "Objectives", FormMethod.Post))
{
@Html.HiddenFor(x => x.PreviousFilterLibrary)
<div class="container">
    <div class="col-lg-10">
        @foreach (ICollection<Objective> group in Model.Objectives.GroupBy(o => o.Title))
        {
            <div class="row">
                <div class="col-lg-12">@group.FirstOrDefault().Title</div>
            </div>
                foreach (Objective obj in group)
            {
            <div class="row">
                <div class="col-lg-1">
                    @if (String.IsNullOrEmpty(obj.Product.ProductDetail.HeaderImageURL) == true)
                    {
                        <span>Various Games</span>
                    }
                    else
                    {
                        <div class="outer-banner-container">
                            <div class="inner-store-banner-container" style="background-image: url(@obj.Product.ProductDetail.HeaderImageURL)"></div>
                        </div>
                    }
                </div>
                <div class="col-lg-3">@obj.ObjectiveName</div>
                <div class="col-lg-1">@((obj.BoostedObjective == null) ? "N" : "Y")</div>
                <div class="col-lg-1">@obj.FixedReward()</div>
                <div class="col-lg-1">@obj.RequiresAdmin</div>
                <div class="col-lg-5">@obj.Description</div>
            </div>
            }
        }
        </div>
        <div class="col-lg-2">
            @if (Context.User.Identity.IsAuthenticated)
            {
                <h3 class="text-primary nav-grouping-header" style="width: 100%;">User Filters</h3>
                if (Model.PreviousFilterLibrary)
                {
                    <button type="submit" class="btn-transparent" name="FilterLibrary" value="true">
                        <i class="glyphicon glyphicon-check"></i> @Html.Label("Unowned", new { @class = "text-success store-filter" })
                    </button>
                }
                else
                {
                    <button type="submit" class="btn-transparent" name="FilterLibrary" value="true">
                        <i class="glyphicon glyphicon-unchecked text-success"></i> @Html.Label("Unowned", new { @class = "text-success store-filter" })
                    </button>
                }
                <br />
            }
            <h3 class="text-primary nav-grouping-header">Genres & Tags</h3>
            @if (Model.SelectedTagMappings != null)
            {
                for (int i = 0; i < Model.SelectedTagMappings.Count(); i++)
                {
                    string idString = "SelectedTagMappings_" + i + "__IsSelected";
                    @Html.HiddenFor(x => x.SelectedTagMappings[i].StoreTag.TagID)
                    @Html.HiddenFor(x => x.SelectedTagMappings[i].StoreTag.TagName)
                    @Html.HiddenFor(x => x.SelectedTagMappings[i].IsSelected)
                    if (Model.SelectedTagMappings[i].IsSelected)
                    {
                        <button class="btn-transparent" type="submit" name="TagToChange" value="@Model.SelectedTagMappings[i].StoreTag.TagID">
                            <i class="glyphicon glyphicon-check text-success" style="font-size: 9px;"></i> @Html.Label(Model.SelectedTagMappings[i].StoreTag.TagName, new { @class = "store-filter text-success" })
                        </button>
                    }
                    else
                    {
                        <button class="btn-transparent" type="submit" name="TagToChange" value="@Model.SelectedTagMappings[i].StoreTag.TagID">
                            <i class="glyphicon glyphicon-unchecked text-success"></i> @Html.Label(Model.SelectedTagMappings[i].StoreTag.TagName, new { @class = "store-filter text-success" })
                        </button>
                    }
                    <br />
                }
            }
    </div>
</div>
}
